<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOOJIN BLOG</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Oct 2022 16:36:02 +0900</pubDate>
    <lastBuildDate>Thu, 06 Oct 2022 16:36:02 +0900</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>REST API</title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;rest-api란&quot;&gt;REST API란?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;REST API에서 REST는 “Representational State Transfer”의 약자로, 로이 필링의 박사학위 논문에서 웹(http)의 장점을 최대한 활용할 수 있는 아키텍처로써 처음 소개되었다. REST API는 &lt;strong&gt;웹에서 사용되는 데이터나 자원(Resource)을 HTTP URI&lt;/strong&gt;로 표현하고, HTTP프로토콜을 통해 요청과 응답을 정의하는 방식을 말한다.&lt;/p&gt;

&lt;p&gt;클라이언트와 서버 사이에도 데이터와 리소스를 요청하고, 요청에 따른 응답을 전달하기 위한 메뉴판이 필요하다. 이 메뉴판을 보고 클라이언트는 식당에서 식사를 주문하듯 서버에 요청하고, 이에 대한 응답을 메뉴판에 있는 사진이나 음식에 대한 설명처럼 다시 서버에서 클라이언트로 전송하게 된다.&lt;/p&gt;

&lt;p&gt;따라서 HTTP프로토콜을 기반으로 요청과 응답에 따라 리소스를 주고받기 위해서는 알아보기 쉽고 잘 작성된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메뉴판&lt;/code&gt;이 필요한데, 이 역할을 API가 수행해야 하므로 모두가 잘 알아볼 수 있도록 작성하는 것이 중요하다.&lt;/p&gt;

&lt;p&gt;그렇다면 어떻게 해야 적절한 REST API를 디자인할 수 있을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;rest-api를-디자인하는-방법&quot;&gt;REST API를 디자인하는 방법&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
REST API를 작성할 때는 몇 가지 지켜야할 규칙들이 있다. 로이 필링이 제시한 REST방법론을 보다 더 실용적으로 적용하기 위해 레오나르도 리차드슨은 REST API를 작 적용하기 위한 4단계 모델을 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/194231854-fe32d212-d99b-4ba2-8b62-83a5588eeb79.png&quot; alt=&quot;스크린샷 2022-10-06 15-38-51&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3&gt;REST성숙도 모델 -0단계&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;REST 성숙도 모델에 따르면, 0단계에서는 단순한 &lt;strong&gt;HTTP프로토콜&lt;/strong&gt;을 사용하기만 해도 된다. 물론 이 경우, 해당 API를 REST API라고 할 수는 없으며, 0단계는 REST API를 작성하기 위한 기본 단계이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/194234911-e972c5cb-d9f0-4891-ab88-1dd5951f6d1d.png&quot; alt=&quot;스크린샷 2022-10-06 15-55-50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3&gt;REST 성숙도 모델 - 1단계&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;REST 성숙도 모델 1단계에서는 개별 리소스(Resource)와의 통신을 준수해야 한다.
모든 자원은 개별 리소스에 맞는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;엔드포인트(Endpoint)&lt;/code&gt;를 사용해야하며 요청하고 받는 자원에 대한 정보를 응답으로 전달해야 한다는 것이 1단계의 핵심이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/194236456-11a7e28b-cea7-4b38-8c9a-c62c706ee1d8.png&quot; alt=&quot;스크린샷 2022-10-06 16-04-49&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예약 가능한 시간 확인이라는 요청의 응답으로 받게 되는 자원(리소스)은 허준이라는 의사의 예약 가능한 시간대이다. 그렇기 때문에 요청시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/doctors/허준&lt;/code&gt; 이라는 엔드포인트를 사용하였다. 또한, 특정 시간에 예약하게 되면, 실제 slots라는 리소스의 123이라는 id를 가진 리소스가 변경되기 때문에, 하단의 특정 시간에 예약이라는 요청에서는 /slot/123으로 실제 변경되는 리소스를 엔드포인트로 사용하였다.&lt;/p&gt;

&lt;p&gt;어떤 리소스를 변화시키는지 혹은 어떤 응답이 제공되는지에 따라 각기 다른 엔드포인트를 사용하기 때문에, 적절한 엔드포인트를 작성하는 것이 중요하며, 엔드포인트 작성 시에는 동사, HTTP메서드, 혹은 어떤 행위에 대한 단어 사용은 지양하고, 리소스에 집중해 명사 형태의 단어로 작성하는 것이 바람직한 방법이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/194239707-0203529d-69ec-4fab-aab6-5ebb5de194f8.png&quot; alt=&quot;스크린샷 2022-10-06 16-12-00&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;더불어 요청에 따른 응답으로 리소스를 전달할 때에도 사용한 리소스에 대한 정보와 함께 리소스 사용에 대한 성공/실패 여부를 반환해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3&gt;REST 성숙도 모델 - 2단계&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;REST 성숙도 모델 2단계에서는 &lt;strong&gt;CRUD에 맞게 적절한 HTTP메서드&lt;/strong&gt;를 사용하는 것에 중점을 둔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/194242407-c6a74ade-15bd-406e-bc92-05856025c398.png&quot; alt=&quot;스크린샷 2022-10-06 16-18-15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저 예약 가능한 시간을 확인한다는 것은 예약 가능한 시간을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;조회(READ)&lt;/code&gt;하는 행위를 의미하고, 특정 시간에 예약한다는 것은 해당 특정 시간에 예약을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생성(CREATE)&lt;/code&gt;한다는 것을 의미한다. 그렇기 때문에 조회(READ)하기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET메서드&lt;/code&gt;를 사용하여 요청을 보내고, 이때 GET메서드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;를 가지지 않기 때문에 query parameter를 사용하여 필요한 리소스를 전달한다.&lt;/p&gt;

&lt;p&gt;또한 예약을 생성(CREATE)하기 위해서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST메서드&lt;/code&gt;를 사용하여 요청을 보내야 하며, POST요청에 대한 응답이 어떻게 반환되는지가 중요하다. 이 경우 응답은 새롭게 생성된 리소스를 보내주기 때문에, 응답 코드는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;201 Created&lt;/code&gt;로 명확하게 작성해야 하며, 관련 리소스를 클라이언트가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; 헤더에 작성된 URI를 통해 확인할 수 있도록 해야한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP메서드를 사용할 때 유의해야 할 몇가지 규칙&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET메서드 같은 경우는 서버의 데이터를 변화시키지 않는 요청에 사용해야 한다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;POST메서드는 요청마다 새로운 리소스를 생성하고 PUT메서드는 요청마다 같은 리소스를 반환한다. 이렇게 매 요청마다 같은 리소스를 반환하는 특징을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;멱등(idempotent)&lt;/code&gt;하다고 한다. 그렇기 때문에 멱등성을 가지는 메서드&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt;과 그렇지 않은 메서드&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;는 구분하여 사용해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3&gt;REST 성숙도 모델 -3단계&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;마지막 단계는 &lt;strong&gt;HATEOAS(Hypermedia As The Engine Of Application State)&lt;/strong&gt; 라는 약어로 표현되는 하이퍼미디어 컨트롤을 적용한다.
3단계의 요청은 2단계와 동일하지만, 응답에는 리소스의 URI를 포함한 &lt;strong&gt;링크&lt;/strong&gt; 요소를 삽입하여 작성해야 한다.&lt;/p&gt;

&lt;p&gt;이때 응답에 들어가게 되는 링크 요소는 응답을 모두 받은 다음에 할 수 있는 다양한 액션들을 위해 많은 하이퍼미디어 컨트롤을 포함하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/194243572-7c92f845-b86f-4bee-9c5f-32aabfb87b57.png&quot; alt=&quot;스크린샷 2022-10-06 16-24-29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 위와 같이 허준이라는 의사의 예약 가능 시간을 확인한 후에는 그 시간대에 예약을 할 수 있는 링크를 삽입하거나, 특정 시간에 예약을 완료하고 나서는 그 예약을 다시 확인할 수 있도록 링크를 작성해 넣을 수도 있다. 이렇게 응답 내에 &lt;strong&gt;새로운 링크를 넣어 새로운 기능에 접근&lt;/strong&gt;할 수 있도록 하는 것이 3단계의 핵심 포인트이다.&lt;/p&gt;

&lt;p&gt;만약 클라이언트 개발자들이 응답에 담겨 있는 링크들을 눈여겨본다면, 이러한 링크들은 조금 더 쉽고, 효율적으로 리소스와 기능에 접근할 수 있게 하는 요소가 될 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;open-api&quot;&gt;Open API&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;정부에서 제공하는 공공데이터에 쉽게 접근할 수 있도록 정부는 Open API의 형태로 공공데이터를 제공하고 있다.&lt;/p&gt;

&lt;p&gt;이 API에는 “Open”이라는 키워드가 붙어 있는데, 글자 그대로 &lt;strong&gt;누구에게나 열려있는 API&lt;/strong&gt;다. 그러나 &lt;strong&gt;무제한으로 이용할 수 있다&lt;/strong&gt;라는 의미는 아니다. API마다 정해진 이용 수칙이 있고, 그 이용 수칙에 따라 제한사항(가격, 정보의 제한 등)이 있을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;api-key&quot;&gt;API Key&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;API를 이용하기 위해서는 API Key가 필요하다. API Key는 &lt;strong&gt;서버의 문을 여는 열쇠&lt;/strong&gt;로 서버를 운용하는 데에 비용이 발생하기 때문에 서버입장에서 아무런 조건 없이 익명의 클라이언트에게 데이터를 제공할 의무는 없다.(가끔 API Key가 필요하지 않은 경우도 있다.)&lt;/p&gt;

&lt;p&gt;API Key가 필요한 경우에는 로그인한 이용자에게 자원에 접근할 수 있는 권한을 API Key의 형태로 제공하고, 데이터를 요청할때 API Key를 같이 전달해야 원하는 응답을 받을 수 있다.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-10/REST-API</link>
        <guid isPermaLink="true">http://localhost:4000/2022-10/REST-API</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>React intro - 1 </title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;react는-무엇인가&quot;&gt;React는 무엇인가?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;React는 웹 프레임워크로, 자바스크립트 라이브러리의 하나로서 사용자 인터페이스를 만들기 위해 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;리액트의 3가지 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;선언형(Declarative)&lt;/li&gt;
  &lt;li&gt;컴포넌트 기반(Component-Based)&lt;/li&gt;
  &lt;li&gt;범용성(Learn Once, Write Anywhere)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;선언형&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;리액트는 한 페이지를 보여주기 위해 HTML/CSS/JS로 나눠서 적는 것보다 하나의 파일에 명시적으로 작성할 수 있게 JSX를 활용한 선언형 프로그래밍을 지향한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;컴포넌트 기반&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;리액트는 하나의 기능 구현을 위해 여러 종류의 코드를 묶어둔 컴포넌트를 기반으로 개발한다. 컴포넌트로 분리하면서 서로 독립적이고 재사용이 가능하므로, 기능 자체에 집중하여 개발할 수 있다.&lt;/li&gt;
  &lt;li&gt;컴포넌트를 먼저 완성시키고, 레이아웃에 따라 유동적으로 컴포넌트의 위치를 변경할 수 있는 상향식 개발(Bottom-up)방식에 적합하다.&lt;/li&gt;
  &lt;li&gt;리액트 컴포넌트는 클래스형 컴포넌트와 함수형 컴포넌트 두 종류가 있다. 기존에는 클래스형 컴포넌트를 주로 사용했었지만, 최근에는 함수형 컴포넌트를 많이 사용한다.&lt;/li&gt;
  &lt;li&gt;모든 컴포넌트 위에는 최상위 컴포넌트가 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;범용성&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;리액트는 JavaScript 프로젝트 어디에든 유연하게 적용될 수 있다.
meta에서 관리되어 안정적이고, 가장 유명하며, 리액트 네이티브로 모바일 개발도 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map 메서드&lt;/code&gt;를 이용한 반복&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React에서 여러 데이터를 렌더링 할 때 map 메서드를 이용한다.
왜 map 메서드를 이용하는 것일까?&lt;/p&gt;

&lt;p&gt;킴코딩이 블로그 개발을 한다고 할 때를 예시로 들어보자!&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Welcome to learning React!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Installation&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;You can install React via npm.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;블로그 포스트가 2개일 경우에는 모든 데이터를 직접 작성(하드코딩)으로 가능하다.
하지만, 블로그 포스트가 100개인 경우를 상상해보면 김코딩은 포스팅이 늘어날 때마다 매일 코드를 변경해야한다. 매우 비효율적인 방식이라고 말할 수 있겠다.
그리고 이러한 비효율적인 방식을 해결하기 위해 배열 메서드인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;을 활용하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postToElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blogs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postToElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blogs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;key 속성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React에서 map 메서드 사용 시, key 속성을 넣지 않으면 아래와 같이 리스트의 각 항목에 key를 넣어야 한다는 경고가 표시된다. key 속성의 위치는 map 메서드 내부에 있는 엘리먼트 즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;첫 엘리먼트&lt;/code&gt;에 넣어주어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/192793083-6e44b57a-7e5d-4f02-8709-8cb7ae3c4a2f.png&quot; alt=&quot;스크린샷 2022-09-28 22-35-56&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;key 속성값이 반드시 id가 되어야 하는가? id가 존재하지 않는다면 어떻게 해야하는가?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;key 속성값은 가능하면 데이터에서 제공하는 id를 할당해야 한다. key 속성값은 id와 마찬가지로 변하지 않고, 예상 가능하며, 유일해야 하기 때문이다. 정 고유한 id가 없는 경우에만 배열 인덱스를 넣어서 해결할 수 있습니다. 배열 인덱스는 최후의 수단(as a last resort)으로만 사용합니다.
Math.random()등으로 무작위로 생성된 값을 key로 지정하게 되면, 컴포넌트 인스턴스와 DOM노드를 불필요하게 재생성하여 성능이 나빨질 수 있다.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/React-intro</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/React-intro</guid>
        
        
        <category>React</category>
        
      </item>
    
      <item>
        <title>React intro - component </title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;컴포넌트는-무엇인가&quot;&gt;컴포넌트는 무엇인가?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하나의 기능 구현을 위한 여러 종류의 코드 묶음, UI를 구성하는 필수 요소&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/192799197-2e5cfd3a-126b-4448-acfa-e3ca130e2d12.png&quot; alt=&quot;스크린샷 2022-09-28 23-00-55&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;리액트를 이용하면, 각자 독립적인 기능을 가지며 UI의 한 부분을 담당하기도 하는 컴포넌트를 여러 개 만들고 조합하여 애플리케이션을 만들 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/192800643-a53cb8be-6821-4506-b087-6224d9912b3d.png&quot; alt=&quot;스크린샷 2022-09-28 23-06-49&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;모든 리액트 애플리케이션은 최소 한 개의 컴포넌트를 가지고 있으며, 이 컴포넌트는 애플리케이션 내부적으로는 근원(root)이 되는 역할을 한다. 이 최상위 컴포넌트는 근원의 역할을 하므로 다른 자식 컴포넌트를 가질 수 있으며, 이 계층적 구조(hierarchy)를 트리 구조로 형상화할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 28 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/React-intro-component</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/React-intro-component</guid>
        
        
        <category>React</category>
        
      </item>
    
      <item>
        <title>프로토타입 체인(Prototype Chain)</title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;프로토타입-체인&quot;&gt;프로토타입 체인&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;객체 지향 프로그래밍의 특성 중 &lt;strong&gt;상속&lt;/strong&gt;을 javascript에서 구현할 때 프로토타입 체인을 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//예시&amp;lt;클래스 Human의 속성과 메소드&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kimcoing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;김코딩&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//속성&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;kimcoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;kimcoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//메서드&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;kimcoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;kimcoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//예시 &amp;lt;클래스 Student의 속성과 메서드&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parkhacker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;박해커&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//속성&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;parkhacker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//메서드&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;parkhacker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;learn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예시에서 나타나는 박해커는 Student이다. 박해커는 학생이기전에 사람이기 때문에 부모 클래스인 Human의 속성을 물려받을 수 있고 메서드를 사용할 수 있다. 이것을 &lt;strong&gt;상속&lt;/strong&gt;이라고 말한다. 또한, 이러한 상속은 &lt;strong&gt;프로토타입 체인&lt;/strong&gt;이 있기에 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;prototype&quot;&gt;.prototype&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;.prototype은 new로 인스턴스를 만들 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;를 생성할 때 사용하는 객체다.&lt;/li&gt;
  &lt;li&gt;함수 객체가 생성자로 사용될 때 이 함수를 통해 생성될 객체의 부모 역할을 하는 객체&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;__proto__&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.__proto__&lt;/code&gt;&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;인스턴스의 .&lt;strong&gt;proto&lt;/strong&gt;를 이용하면 &lt;strong&gt;부모 클래스의 프로토타입&lt;/strong&gt;, 부모의 부모 클래스의 프로토타입을 탐색할 수 있다. 자식에서 부모로 거슬러 올라간다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;object&quot;&gt;Object&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Object는 &lt;strong&gt;모든 클래스의 조상&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/191640679-7d6a9d2a-40b1-4521-8adf-3af62f081795.png&quot; alt=&quot;스크린샷 2022-09-22 10-48-43&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/191641645-b1a161cc-f3bb-4114-a611-cbbac831c5b3.png&quot; alt=&quot;스크린샷 2022-09-22 10-58-10&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;공부 후 느낀점&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아직 .prototype에 대한 개념이 확실히 잡히지 않았고 .prototype의 역할이 무엇인지 명확하게 설명할 자신이 없다. 이와 관련하여 명확하게 이해할 수 있도록 좀 더 공부를 해야겠다.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B8</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B8</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>extends 키워드와 super키워드</title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;extends&quot;&gt;extends&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;extends 키워드는 클래스를 다른 클래스의 자식으로 만들기 위해 class 선언 또는 class 식에 사용된다.&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ChildClass&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParentClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;super&quot;&gt;super&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;super 키워드는 부모 객체의 함수를 호출할 때 사용된다.&lt;/li&gt;
  &lt;li&gt;super 키워드는 생성자 함수 내에서 한번만 사용될 수 있다.&lt;/li&gt;
  &lt;li&gt;this 키워드가 사용되기 전에 호출되어야 한다. 전에 호출이 되면 참조오류가 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// extends 키워드를 사용하여 Human(부모클래스)의 속성과 메소드를 Student(자식클래스)에 상속&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// super 키워드를 사용하여 부모객체의 함수를 호출&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;를 공부하였습니다.`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참조&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/super&quot;&gt;mdn - super&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/extends&quot;&gt;mdn - extends&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/extends-%EC%99%80-super</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/extends-%EC%99%80-super</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>프로토타입(Prototype)</title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;프로토타입prototype&quot;&gt;프로토타입(Prototype)&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로토타입은 &lt;strong&gt;원형 객체&lt;/strong&gt;를 의미한다.
모든 객체는 그들의 프로토타입으로부터 속성(property)와 메소드를 상속받는데, 이때 상속되는 정보를 제공하는 객체를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로토타입(prototype)&lt;/code&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;prototype과-__proto__-의-차이&quot;&gt;.prototype과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__proto__&lt;/code&gt; 의 차이&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;.prototype은 new로 인스턴스를 만들 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;를 생성할 때 사용하는 객체다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__proto__&lt;/code&gt;는 메서드 등을 찾는데 사용되는 실제 객체이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;은 잠에 들었습니다`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Person이라는 새로운 객체가 생성됨&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kimcoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;김코딩&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;female&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kimcoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kimcoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;클래스-인스턴스-프로토타입의-관계&quot;&gt;클래스, 인스턴스, 프로토타입의 관계&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/111376707/191464092-7bf2a707-d37c-4d86-9088-11a8d5dbee5d.png&quot; alt=&quot;example&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>클래스와 인스턴스</title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;클래스와-인스턴스는-무엇일까&quot;&gt;클래스와 인스턴스는 무엇일까?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;클래스와 인스턴스가 무엇인가에 대해 말하기 위해서 &lt;strong&gt;객체 지향 프로그래밍&lt;/strong&gt;에 대해 알아보아야 한다.&lt;/p&gt;

&lt;p&gt;객체 지향 프로그래밍은 설계도라고 할 수 있는 하나의 청사진을 만들고, 그 청사진을 바탕으로 한 객체를 만드는 프로그래밍 패턴이다.&lt;/p&gt;

&lt;p&gt;✔ 객체 지향 프로그래밍의 청사진을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;클래스&lt;/code&gt; 라고 부른다.
&lt;br /&gt;
✔ 청사진을 바탕으로 한 객체, 인스턴스 객체(instance object)를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;인스턴스&lt;/code&gt;라고 부른다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;객체는-어떤-식으로-만들어질까&quot;&gt;객체는 어떤 식으로 만들어질까?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;객체는 일반적인 함수를 정의하듯 만든다. 하지만 함수와 이용하는 방법이 조금은 다르다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;라는 키워드를 사용하여 새로운 인스턴스를 만든다.&lt;/li&gt;
  &lt;li&gt;일반적인 다른 함수와 구분하기 위해 클래스를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;대문자&lt;/code&gt;로 시작하는 일반명사로 만든다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;클래스를-만드는-문법&quot;&gt;클래스를 만드는 문법&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;클래스를 만드는 문법으로 ES5 와 ES6가 주로 사용되며 현재는 ES6가 주로 사용된다고 한다. ES6는 클래스를 만드는 새로운 문법으로 class 키워드를 이용하여&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ES5 와 ES6의 클래스 작성 문법&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ES5 : 함수로 정의할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Laptop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Laptop이 class, function은 생성자 함수&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Laptop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recharge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//배터리 충전을 구현하는 코드&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Laptop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;operate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 시스템을 실행하는 코드&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Laptop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;LG&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gram&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 인스턴스&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &apos;white&apos;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;recharge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//그램이 배터리를 충전합니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ES6 : class라는 키워드를 이용해서 정의할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Laptop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;recharge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;✔ 여기서 보이는 함수는 객체지향 프로그래밍에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생성자(constructor) 함수&lt;/code&gt; 라고 부르며, 인스턴스가 만들어질 때 실행되는 코드이다. 생성자 함수는 return 값을 만들지 않는다.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>객체 지향 프로그래밍(OOP)</title>
        <description>&lt;blockquote&gt;
  &lt;h2 id=&quot;객체-지향-프로그래밍oop&quot;&gt;객체 지향 프로그래밍(OOP)&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;객체 지향 프로그래밍&lt;/code&gt; 이라는 패러다임이 등장하며, 별개의 변수와 함수로 순차적으로 작동하는 것을 넘어, 데이터의 접근과, 데이터의 처리 과정에 대한 모형을 만들어 내는 방식을 고안해내었다. =&amp;gt; &lt;strong&gt;데이터와 기능을 한 번에 묶어 처리가능&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OOP는 프로그램 설계 철학이다.&lt;/li&gt;
  &lt;li&gt;OOP의 모든 것은 ‘객체’로 그룹화된다.&lt;/li&gt;
  &lt;li&gt;OOP의 4가지 주요 개념(캡슐화, 추상화, 상속, 다형성)을 통해 재사용성을 얻을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;객체 지향 프로그래밍에서는&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; class&lt;/code&gt;에는 공통적인 기능과 고유의 속성이 존재하는데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constructor(생성자 함수)&lt;/code&gt;를 이용해 고유의 값인 속성과 메소드를 부여하면서 각각의&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; instance&lt;/code&gt;를 만들어 낸다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;oop-basic-concepts&quot;&gt;OOP Basic Concepts&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encapsulation(캡슐화)&lt;/li&gt;
  &lt;li&gt;Inheritance(상속)&lt;/li&gt;
  &lt;li&gt;Abstraction(추상화)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Polymorphism(다형성)&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;h4&gt;캡슐화 Encapsulation
&lt;/h4&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터와 기능을 하나의 단위(객체)로 묶는 것&lt;/li&gt;
      &lt;li&gt;은닉(hiding): 구현은 숨기고, 동작만 노출시킴&lt;/li&gt;
      &lt;li&gt;느슨한 결합(Loose Coupling)에 유리: 언제든 구현 수정 가능&lt;/li&gt;
      &lt;li&gt;코드가 복잡하지 않게 만들고, 재사용성을 높인다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;h4&gt;추상화 Abstraction
&lt;/h4&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;내부 구현은 복잡하지만, 실제로 노출되는 부분은 단순하게 만드는 것이 추상화이다. 이러한 추상화를 통해 인터페이스가 단순해진다. 많은 기능이 노출되지 않으므로 예기치 못한 사용상의 변화가 발생하지 않도록 만들 수 있다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;코드가 복잡하지 않게 만들고, 단순하된 사용으로 변화에 대한 영향을 최소화&lt;/p&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;h4&gt;상속 Inheritance
&lt;/h4&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;상속은 부모 클래스의 특징을 자식 클래스가 물려받는 것을 말한다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;불필요한 코드를 줄여 재사용성을 높인다.&lt;/p&gt;

        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;blockquote&gt;
      &lt;h4&gt;다형성 Polymorphism
&lt;/h4&gt;
    &lt;/blockquote&gt;

    &lt;ul&gt;
      &lt;li&gt;객체마다 똑같은 메서드를 사용하더라도 그 메서드가 조금씩 다르게 작동하는 것을 말한다.&lt;/li&gt;
      &lt;li&gt;조건문 대신 객체의 특성에 맞게 달리 작성이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>Section 1 회고</title>
        <description>&lt;h2 id=&quot;1-내가-여기서-얻고-싶은게-무엇인가&quot;&gt;1. 내가 여기서 얻고 싶은게 무엇인가?&lt;/h2&gt;

&lt;p&gt;Section 1 동안에 나의 목표는 무엇인가?에 대해 꾸준히 상기하며 보내지는 않았던 것 같다.&lt;/p&gt;

&lt;p&gt;그냥 그날 그날의 주어진 내용을 습득하기에 급급했고 따라가는 것만으로도 다행이었다.&lt;/p&gt;

&lt;p&gt;그래서 지금에 회고를 하면서 다시 내 목표는 무엇이고 여기서 무엇을 얻고 싶었었는지에 대해 다시 한번 생각해본다.&lt;/p&gt;

&lt;p&gt;이곳에서 나는 개발자에게 요구되는 역량(전문적인 지식, 노하우, …)을 얻고 싶었고 개발자가 되기 위한 방향성을 잡고 싶었다.&lt;/p&gt;

&lt;p&gt;현재 돌이켜보면 아직은 시작이기 때문에 확실하게 말할 건 없지만 그래도 무지하게 어렵지만 개발에 대한 흥미는 점점 더 생기고 있다.&lt;/p&gt;

&lt;p&gt;새로운 내용을 배우고 습득하면서 버거울 때도 있지만 &lt;strong&gt;새로운 것을 배우면서 즐기는 개발자&lt;/strong&gt;가 되고 싶다는 생각과 목표가 생겼다.&lt;/p&gt;

&lt;h2 id=&quot;2-keep-problem&quot;&gt;2. Keep, Problem&lt;/h2&gt;

&lt;h3 id=&quot;목표를-달성하기-위해-했던-노력은-무엇이며-반드시-유지해야할-노력은-무엇인가keep&quot;&gt;&lt;strong&gt;목표를 달성하기 위해 했던 노력은 무엇이며 반드시 유지해야할 노력은 무엇인가?&lt;/strong&gt;(&lt;strong&gt;keep)&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;매일 2시간 이상 배운 내용 복습하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주 2회 이상 30분 운동하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자기주도적 학습 습관 들이기(궁금한 내용 바로 찾아보기, 이해 안되면 넘어가고 나중에 다시 찾아보기)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주말 중 하루는 공부하기&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;목표를 달성하기 위해 위와 같은 노력을 했었고 다 유지해야 한다고 생각한다. 아주 기본적인 노력이기 때문이다.&lt;/p&gt;

&lt;p&gt;여기서 더 노력을 안하면 발전할 수 없으니까 ^^&lt;/p&gt;

&lt;h3 id=&quot;목표를-달성하는데-있어서-가장-큰-장애물은-무엇이었는가-problem&quot;&gt;&lt;strong&gt;목표를 달성하는데 있어서 가장 큰 장애물은 무엇이었는가? (problem)&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;공부할 체력이 너무 부족했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;일정한 시간에 잠들지 않아 몸 생체리듬이 좋지 못했다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;일어나는 것은 힘들지 않지만 자는게 어렵다. 불면증이 나아지긴 했지만 매일 새벽 1시 이전에는 잘 수 있도록 노력하고 영양제랑 운동을 열심히 해서 체력을 길러야 겠다. 체력이 없으니까 아무것도 할 수가 없었다. 공부를 하고 싶어도 몸이 안 따라주면 서럽고 슬프고 자괴감이 들어서 내 몸을 열심히 단련해야겠다고 생각했다.&lt;/p&gt;

&lt;h2 id=&quot;3-tryaction&quot;&gt;3. Try(Action)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;새벽 1시 이전에 자기( 잠 안와도 핸드폰 보지 말기)&lt;/li&gt;
  &lt;li&gt;힘들어도 근력 운동하기(반드시 쉬운 운동만 하지 않고 일어나서 하는 운동하자…)&lt;/li&gt;
  &lt;li&gt;밥을 잘 챙겨 먹어서 영양분 섭취를 잘 해야겠다…&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-우선순위&quot;&gt;4. 우선순위&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Try 1. 새벽 1시 이전에 반드시 자기(절대 핸드폰 보지 말기).&lt;/li&gt;
  &lt;li&gt;Try 2. 밥을 잘 챙겨 먹기(하루에 2끼 이상은 먹기)&lt;/li&gt;
  &lt;li&gt;Try 3. 힘들어도 근력 운동하기(쉬운 운동만 하지 말기)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 19 Sep 2022 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2022-09/Section1</link>
        <guid isPermaLink="true">http://localhost:4000/2022-09/Section1</guid>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>Sample Post</title>
        <description>&lt;p&gt;This is a sample post.&lt;br /&gt;
&lt;dfn info=&quot;You can add extra information&quot;&gt;Hover&lt;/dfn&gt; me.&lt;/p&gt;

&lt;h2 id=&quot;header&quot;&gt;Header&lt;/h2&gt;

&lt;h1 id=&quot;head-1-&quot;&gt;Head 1: ‘#’&lt;/h1&gt;
&lt;h2 id=&quot;head-2-&quot;&gt;Head 2: ‘##’&lt;/h2&gt;
&lt;h3 id=&quot;head-3-&quot;&gt;Head 3: ‘###’&lt;/h3&gt;

&lt;h2 id=&quot;code-block&quot;&gt;Code block&lt;/h2&gt;
&lt;p&gt;A Python Example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Socrates
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;The only true wisdom is in knowing you know nothing.&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A HTML Example:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;quote&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Maya Angelou --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Try to be a rainbow in someone&apos;s cloud.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A C Example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Confucius&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Everything has beauty, but not everyone sees it.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2017-11/s2</link>
        <guid isPermaLink="true">http://localhost:4000/2017-11/s2</guid>
        
        
        <category>writing</category>
        
      </item>
    
  </channel>
</rss>