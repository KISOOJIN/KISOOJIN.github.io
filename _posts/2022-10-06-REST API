---
title: "REST API"

categories: [TIL]
comments: true

toc: true
toc_sticky: true
## date: 2022-10-06
---

> ## REST API란?

<br/>

REST API에서 REST는 "Representational State Transfer"의 약자로, 로이 필링의 박사학위 논문에서 웹(http)의 장점을 최대한 활용할 수 있는 아키텍처로써 처음 소개되었다. REST API는 **웹에서 사용되는 데이터나 자원(Resource)을 HTTP URI**로 표현하고, HTTP프로토콜을 통해 요청과 응답을 정의하는 방식을 말한다.

클라이언트와 서버 사이에도 데이터와 리소스를 요청하고, 요청에 따른 응답을 전달하기 위한 메뉴판이 필요하다. 이 메뉴판을 보고 클라이언트는 식당에서 식사를 주문하듯 서버에 요청하고, 이에 대한 응답을 메뉴판에 있는 사진이나 음식에 대한 설명처럼 다시 서버에서 클라이언트로 전송하게 된다.

따라서 HTTP프로토콜을 기반으로 요청과 응답에 따라 리소스를 주고받기 위해서는 알아보기 쉽고 잘 작성된 `메뉴판`이 필요한데, 이 역할을 API가 수행해야 하므로 모두가 잘 알아볼 수 있도록 작성하는 것이 중요하다.

그렇다면 어떻게 해야 적절한 REST API를 디자인할 수 있을까?

<br/>

> ## REST API를 디자인하는 방법

<br/>
REST API를 작성할 때는 몇 가지 지켜야할 규칙들이 있다. 로이 필링이 제시한 REST방법론을 보다 더 실용적으로 적용하기 위해 레오나르도 리차드슨은 REST API를 작 적용하기 위한 4단계 모델을 만들었다.

<br/>

![스크린샷 2022-10-06 15-38-51](https://user-images.githubusercontent.com/111376707/194231854-fe32d212-d99b-4ba2-8b62-83a5588eeb79.png)

<br />

> <h3>REST성숙도 모델 -0단계</h3>

<br/>

REST 성숙도 모델에 따르면, 0단계에서는 단순한 **HTTP프로토콜**을 사용하기만 해도 된다. 물론 이 경우, 해당 API를 REST API라고 할 수는 없으며, 0단계는 REST API를 작성하기 위한 기본 단계이다.

![스크린샷 2022-10-06 15-55-50](https://user-images.githubusercontent.com/111376707/194234911-e972c5cb-d9f0-4891-ab88-1dd5951f6d1d.png)

<br/>

> <h3>REST 성숙도 모델 - 1단계</h3>

<br/>

REST 성숙도 모델 1단계에서는 개별 리소스(Resource)와의 통신을 준수해야 한다.
모든 자원은 개별 리소스에 맞는 `엔드포인트(Endpoint)`를 사용해야하며 요청하고 받는 자원에 대한 정보를 응답으로 전달해야 한다는 것이 1단계의 핵심이다.

<br/>

![스크린샷 2022-10-06 16-04-49](https://user-images.githubusercontent.com/111376707/194236456-11a7e28b-cea7-4b38-8c9a-c62c706ee1d8.png)

<br/>

예약 가능한 시간 확인이라는 요청의 응답으로 받게 되는 자원(리소스)은 허준이라는 의사의 예약 가능한 시간대이다. 그렇기 때문에 요청시 `/doctors/허준` 이라는 엔드포인트를 사용하였다. 또한, 특정 시간에 예약하게 되면, 실제 slots라는 리소스의 123이라는 id를 가진 리소스가 변경되기 때문에, 하단의 특정 시간에 예약이라는 요청에서는 /slot/123으로 실제 변경되는 리소스를 엔드포인트로 사용하였다.

어떤 리소스를 변화시키는지 혹은 어떤 응답이 제공되는지에 따라 각기 다른 엔드포인트를 사용하기 때문에, 적절한 엔드포인트를 작성하는 것이 중요하며, 엔드포인트 작성 시에는 동사, HTTP메서드, 혹은 어떤 행위에 대한 단어 사용은 지양하고, 리소스에 집중해 명사 형태의 단어로 작성하는 것이 바람직한 방법이다.

<br/>

![스크린샷 2022-10-06 16-12-00](https://user-images.githubusercontent.com/111376707/194239707-0203529d-69ec-4fab-aab6-5ebb5de194f8.png)
<br/>

더불어 요청에 따른 응답으로 리소스를 전달할 때에도 사용한 리소스에 대한 정보와 함께 리소스 사용에 대한 성공/실패 여부를 반환해야 한다.

<br/>

> <h3>REST 성숙도 모델 - 2단계</h3>

<br/>

REST 성숙도 모델 2단계에서는 **CRUD에 맞게 적절한 HTTP메서드**를 사용하는 것에 중점을 둔다.

<br/>

![스크린샷 2022-10-06 16-18-15](https://user-images.githubusercontent.com/111376707/194242407-c6a74ade-15bd-406e-bc92-05856025c398.png)

<br/>

먼저 예약 가능한 시간을 확인한다는 것은 예약 가능한 시간을 `조회(READ)`하는 행위를 의미하고, 특정 시간에 예약한다는 것은 해당 특정 시간에 예약을 `생성(CREATE)`한다는 것을 의미한다. 그렇기 때문에 조회(READ)하기 위해서는 `GET메서드`를 사용하여 요청을 보내고, 이때 GET메서드는 `body`를 가지지 않기 때문에 query parameter를 사용하여 필요한 리소스를 전달한다.

또한 예약을 생성(CREATE)하기 위해서는 `POST메서드`를 사용하여 요청을 보내야 하며, POST요청에 대한 응답이 어떻게 반환되는지가 중요하다. 이 경우 응답은 새롭게 생성된 리소스를 보내주기 때문에, 응답 코드는 `201 Created`로 명확하게 작성해야 하며, 관련 리소스를 클라이언트가 `Location` 헤더에 작성된 URI를 통해 확인할 수 있도록 해야한다.

<br/>

**HTTP메서드를 사용할 때 유의해야 할 몇가지 규칙**

- GET메서드 같은 경우는 서버의 데이터를 변화시키지 않는 요청에 사용해야 한다.
  <br/>
- POST메서드는 요청마다 새로운 리소스를 생성하고 PUT메서드는 요청마다 같은 리소스를 반환한다. 이렇게 매 요청마다 같은 리소스를 반환하는 특징을 `멱등(idempotent)`하다고 한다. 그렇기 때문에 멱등성을 가지는 메서드`PUT`과 그렇지 않은 메서드`POST`는 구분하여 사용해야 합니다.

<br/>

> <h3>REST 성숙도 모델 -3단계</h3>

마지막 단계는 **HATEOAS(Hypermedia As The Engine Of Application State)** 라는 약어로 표현되는 하이퍼미디어 컨트롤을 적용한다.
3단계의 요청은 2단계와 동일하지만, 응답에는 리소스의 URI를 포함한 **링크** 요소를 삽입하여 작성해야 한다.

이때 응답에 들어가게 되는 링크 요소는 응답을 모두 받은 다음에 할 수 있는 다양한 액션들을 위해 많은 하이퍼미디어 컨트롤을 포함하고 있다.

<br/>

![스크린샷 2022-10-06 16-24-29](https://user-images.githubusercontent.com/111376707/194243572-7c92f845-b86f-4bee-9c5f-32aabfb87b57.png)

<br/>

예를 들어 위와 같이 허준이라는 의사의 예약 가능 시간을 확인한 후에는 그 시간대에 예약을 할 수 있는 링크를 삽입하거나, 특정 시간에 예약을 완료하고 나서는 그 예약을 다시 확인할 수 있도록 링크를 작성해 넣을 수도 있다. 이렇게 응답 내에 **새로운 링크를 넣어 새로운 기능에 접근**할 수 있도록 하는 것이 3단계의 핵심 포인트이다.

만약 클라이언트 개발자들이 응답에 담겨 있는 링크들을 눈여겨본다면, 이러한 링크들은 조금 더 쉽고, 효율적으로 리소스와 기능에 접근할 수 있게 하는 요소가 될 수 있다.

> ## Open API

정부에서 제공하는 공공데이터에 쉽게 접근할 수 있도록 정부는 Open API의 형태로 공공데이터를 제공하고 있다.

이 API에는 "Open"이라는 키워드가 붙어 있는데, 글자 그대로 **누구에게나 열려있는 API**다. 그러나 **무제한으로 이용할 수 있다**라는 의미는 아니다. API마다 정해진 이용 수칙이 있고, 그 이용 수칙에 따라 제한사항(가격, 정보의 제한 등)이 있을 수 있다.

<br/>

> ## API Key

API를 이용하기 위해서는 API Key가 필요하다. API Key는 **서버의 문을 여는 열쇠**로 서버를 운용하는 데에 비용이 발생하기 때문에 서버입장에서 아무런 조건 없이 익명의 클라이언트에게 데이터를 제공할 의무는 없다.(가끔 API Key가 필요하지 않은 경우도 있다.)

API Key가 필요한 경우에는 로그인한 이용자에게 자원에 접근할 수 있는 권한을 API Key의 형태로 제공하고, 데이터를 요청할때 API Key를 같이 전달해야 원하는 응답을 받을 수 있다.
